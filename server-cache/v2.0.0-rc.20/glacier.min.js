AWS.Glacier=AWS.Service.defineService("glacier");AWS.util.update(AWS.Glacier.prototype,{setupRequestListeners:function e(a){if(Array.isArray(a._events.validate)){a._events.validate.unshift(this.validateAccountId)}else{a.on("validate",this.validateAccountId)}a.on("build",this.addGlacierApiVersion);a.on("build",this.addTreeHashHeaders)},validateAccountId:function a(e){if(e.params.accountId!==undefined)return;e.params=AWS.util.copy(e.params);e.params.accountId="-"},addGlacierApiVersion:function t(e){var a=e.service.api.apiVersion;e.httpRequest.headers["x-amz-glacier-version"]=a},addTreeHashHeaders:function r(e){if(e.params.body===undefined)return;var a=e.service.computeChecksums(e.params.body);e.httpRequest.headers["x-amz-content-sha256"]=a.linearHash;if(!e.httpRequest.headers["x-amz-sha256-tree-hash"]){e.httpRequest.headers["x-amz-sha256-tree-hash"]=a.treeHash}},computeChecksums:function i(e){if(!AWS.util.Buffer.isBuffer(e))e=new AWS.util.Buffer(e);var a=1024*1024;var t=[];var r=AWS.util.crypto.createHash("sha256");for(var i=0;i<e.length;i+=a){var s=e.slice(i,Math.min(i+a,e.length));r.update(s);t.push(AWS.util.crypto.sha256(s))}return{linearHash:r.digest("hex"),treeHash:this.buildHashTree(t)}},buildHashTree:function s(e){while(e.length>1){var a=[];for(var t=0;t<e.length;t+=2){if(e[t+1]){var r=new AWS.util.Buffer(64);r.write(e[t],0,32,"binary");r.write(e[t+1],32,32,"binary");a.push(AWS.util.crypto.sha256(r))}else{a.push(e[t])}}e=a}return AWS.util.crypto.toHex(e[0])}});