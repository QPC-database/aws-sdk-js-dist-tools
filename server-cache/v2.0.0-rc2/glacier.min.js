AWS.Glacier=AWS.Service.defineService("glacier",["2012-06-01"],{setupRequestListeners:function e(a){a.on("validate",this.validateAccountId);a.on("build",this.addGlacierApiVersion);a.on("build",this.addTreeHashHeaders)},validateAccountId:function a(e){if(e.params.accountId!==undefined)return;e.params=AWS.util.copy(e.params);e.params.accountId="-"},addGlacierApiVersion:function r(e){var a=e.service.api.apiVersion;e.httpRequest.headers["x-amz-glacier-version"]=a},addTreeHashHeaders:function t(e){if(e.params.body===undefined)return;var a=e.service.computeChecksums(e.params.body);e.httpRequest.headers["x-amz-content-sha256"]=a.linearHash;if(!e.httpRequest.headers["x-amz-sha256-tree-hash"]){e.httpRequest.headers["x-amz-sha256-tree-hash"]=a.treeHash}}});AWS.util.update(AWS.Glacier.prototype,{computeChecksums:function i(e){if(!(e instanceof Buffer))e=new Buffer(e);var a=1024*1024;var r=[];var t=AWS.util.crypto.createHash("sha256");for(var i=0;i<e.length;i+=a){var s=e.slice(i,Math.min(i+a,e.length));t.update(s);r.push(AWS.util.crypto.sha256(s))}return{linearHash:t.digest("hex"),treeHash:this.buildHashTree(r)}},buildHashTree:function s(e){while(e.length>1){var a=[];for(var r=0;r<e.length;r+=2){if(e[r+1]){var t=new Buffer(64);t.write(e[r],0,32,"binary");t.write(e[r+1],32,32,"binary");a.push(AWS.util.crypto.sha256(t))}else{a.push(e[r])}}e=a}return AWS.util.crypto.toHex(e[0])}});